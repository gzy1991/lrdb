<?xml version="1.0" encoding="UTF-8"?>
<!-- 当前持久层配置文件 分为两个根节点 datasource包含了所有数据源的物理信息，每个数据源的name不可重复。mutidatasource 
	用来配置开发视角的数据源使用信息 如读写分离 -->
<root>
	<conf name="default">
		<property name="hibernate.hbm2ddl.auto" value="false" />

		<!-- 缺省值为0 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="10" />

		<!-- 最大连接池数量 -->
		<property name="maxActive" value="10" />

		<!-- 最小连接池数量 -->
		<property name="minIdle" value="10" />

		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁 -->
		<property name="maxWait" value="60000" />

		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="false" />

		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxOpenPreparedStatements" value="-1" />

		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="select 1" />

		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="true" />

		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />

		<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="testWhileIdle" value="false" />

		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />

		<!-- Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。 -->
		<property name="minEvictableIdleTimeMillis" value="40000" />

		<!-- 物理连接初始化的时候执行的sql。 -->
		<property name="connectionInitSqls" value="select 1" />

		<!-- 当数据库抛出一些不可恢复的异常时，抛弃连接 -->
		<property name="exceptionSorter" value="异常" />

		<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 
			防御sql注入的filter:wall -->
		<property name="filters" value="stat,slf4j" />

		<!-- 类型是List<com.alibaba.druid.filter.Filter>，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系 -->
		<property name="proxyFilters" value="filter:wall" />

		<!-- 对于建立时间超过removeAbandonedTimeout的连接强制关闭 -->
		<property name="removeAbandoned" value="" />

		<!-- 指定连接建立多长时间就需要被强制关闭 -->
		<property name="removeAbandonedTimeout" value="10000" />

		<!-- 指定发生removeabandoned的时候，是否记录当前线程的堆栈信息到日志中 -->
		<property name="logAbandoned" value="false" />

	</conf>
	<datasource name="localmysql" conf="default">


		<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />

		<property name="url" value="jdbc:mysql://127.0.0.1/sword-room-dev"/> 
		<property name="username" value="root" /> 
		<property name="password" value="root" />

		<!-- <property name="url" value="jdbc:mysql://10.12.10.146/sword-room-dev" />
		<property name="username" value="css" />
		<property name="password" value="css" /> -->


		<!-- 根据url自动识别 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />

	</datasource>

	<datasource name="localDm" conf="default">

		<!-- 数据库驱动类名称 达梦 -->
		<property name="driverClassName" value="dm.jdbc.driver.DmDriver" />
		<property name="hibernate.dialect" value="org.hibernate.dialect.DmDialect" />
		<property name="url" value="jdbc:dm://10.12.10.95:5236/CSS" />
		<property name="username" value="CSS" />
		<property name="password" value="css123456" />

	</datasource>


	<!-- 每个mutidatasource的name值是不能重复的 代码以mutidatasource的name值来获取数据源。有且只能有一个default为true 
		默认为false。entry的value值取自datasource。 "W"有且只能有一个。 -->
	<multidatasource name="defaultMutiDS" isdefault="true">
		<entry key="W" value="localmysql" />
	</multidatasource>


</root>